# -*- coding: utf-8 -*-
"""
Created on Wed Nov 16 13:21:27 2022

@author: ttran
"""

from random import sample
from random import choices
from random import randint

import os

import numpy as np
from rbomod import rbo_modified as RSM

#import matplotlib.pyplot as plt




def simulation(topk : int = 10,
               strict_k : bool = True,
               size_l: int = 1000, 
               withreplacement: bool = False,
               wg_func_name: str = 'poisson', 
               params_wg_func: dict = None, 
               nb_generatedlist: int = 100,
               size_vocabulary: int = 100000,
               Nb_r: int = 1, 
               percent_repl: float = 0.05, 
               percent_shuffle: float = 0.05
               ):
    """
    

    Parameters
    ----------
    size_l : int, optional
        The size of the list to be generated. The default is 20.
    
    withreplacement: bool, optional
        Parameter that controls if the user wants to include replacement of 
        elements in the the simulation
    
    sd : int, optional
        An integer to fix the randomization. The default is 1.
    
    nb_generatedlist : int, optional
        Number of desired elements to be generated by this function. The default is 100.
    
    size_vocabulary: int, optional
        The size of the characters for the list l to be generated from. The default is 100.
    
    Nb_r: int, optional
        Number of elements that will be replaced if the "withreplacement" parameter is chosen.
        The default is 1
    
    percent_repl: float
        Percentage of replacement in the generated sequence
        
    percent_shuffle: float
        Number of element that switched place
    Returns
    -------
    None.

    """
    
    # Set up some parameters
    n = nb_generatedlist
    V = np.arange(0, size_vocabulary, 1)
    print('Simulation of lists started...')
    
    
    # part 1: simulate a list of rankings
    
    if withreplacement == False:  # if there's no replacement to be considered in the model
        l = list(np.arange(0, size_l, 1))
        
        # result 
        output_rnks = [l]
        
        while n > 0:
            # Number of element to switch place
            maxNb_s = int(size_l*percent_shuffle)+1
            Nb_s = randint(2, max(2, maxNb_s)) // 2
            l_shuffle = l.copy()
            
            while Nb_s > 0:
                sw = sample(list(range(len(l))), k=2) # choose randomly two indices to switch place
                l_shuffle[sw[0]] = l_shuffle[sw[1]]
                l_shuffle[sw[1]] = l_shuffle[sw[0]]
                Nb_s -= 1
            output_rnks.append(l_shuffle)
            n -= 1 
    
    
    else:  # if we do consider the replacement, then 
        output_rnks = []
        
        while n > 0:
            #seed(n)
            # 1. randomly generate a number Nb_r : this is the number of replacement in the ranking
            maxNb_r = int(size_l*percent_repl)+1
            Nb_r = randint(0, maxNb_r)
            #print('Number of replaced items=', Nb_r)

            # l = [0, 1, ...., size_l - Nb_r]
            l = list(np.arange(0, size_l - Nb_r))   
            
            
            # 2. Complete the rest by generating random number not in l
            for i in range(size_l - Nb_r, size_l):
                #seed(n + i)
                r = randint(V[i], V[-1]) # generate a number to fill in l
                idx_to_append = randint(0, len(l)-1)
               
                elt_at_idx_to_append = l[idx_to_append]
                l[idx_to_append] = r
                l.append(elt_at_idx_to_append)

                
            # 3 . Additional shuffling of the list
            # Number of element to switch place
            maxNb_s = int(size_l*percent_shuffle)+1
            Nb_s = randint(2, max(2, maxNb_s)) // 2
            l_shuffle = l.copy()
            
            while Nb_s > 0:
                sw = sample(list(range(len(l))), k=2) # choose randomly two indices to switch place
                
                l_shuffle[sw[0]] = l_shuffle[sw[1]]
                l_shuffle[sw[1]] = l_shuffle[sw[0]]
                Nb_s -= 1 
            
            output_rnks.append(l_shuffle)
            n -= 1 
            
    print('Number of elements to be generated=', len(output_rnks[0]))
    print('Percentage of replacement in the sample=', percent_repl)

    #===============================================================

    
    # Part 2: Similarity ranking measure evaluation
    output_scores = []
    
    # Instead, choose randomly 2 elements at each time
    n = nb_generatedlist
    while n > 0:
        l_i = choices(output_rnks)[0]
        l_j = choices(output_rnks)[0]
        rsm = RSM(l_i, l_j, wg_func_name, params_wg_func, topk, strict_k)
        
        output_scores.append(rsm)
        n -= 1
    
    l_scores_str = str(output_scores)
    l_scores_str = l_scores_str[1:-1]
    
    # Export data generated
    source = os.path.dirname(os.getcwd())
    path = source + '/data/'
    name = "RSM_sim.txt"
    with open(path+name, 'w') as f:
        for line in output_scores:
            f.write(f"{line}\n")    
          
    print(f'\nCheck RSM scores simulated in {path} \n\nFilename: {name}')
    
    # Export data generated
    source = os.path.dirname(os.getcwd())
    path = source + '/data/'
    name = "RSM_rnks.txt"
    with open(path+name, 'w') as f:
        for line in output_rnks:
            f.write(f"{line}\n")    
          
    print(f'\nCheck rankings simulated in {path} \n\nFilename: {name}')
    
    
    
    
    
# =============================================================================
#     # Creating histogram
#     fig, axs = plt.subplots(1, 1, figsize =(10, 7))
#     axs.hist(output_scores)
#     plt.suptitle(f'Distribution of SMS of {nb_generatedlist} elts with repl{withreplacement}, perctrp ={percent_repl}, list_size={size_l}')
#     # Show plot
#     plt.show()
# =============================================================================
    return(output_rnks, output_scores)

